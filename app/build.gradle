apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Define app version number
ext.versionMajor = 0
ext.versionMinor = 0
ext.versionPatch = 0
ext.versionClassifier = null
ext.isSnapshot = true

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.tiixel.periodictableprofessor"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()

        testInstrumentationRunner "com.tiixel.periodictableprofessor.test.TestRunner"

        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            // Minifying the variant used for tests is not supported when using Jack.
            minifyEnabled false
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            testCoverageEnabled true
        }

        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    flavorDimensions "default"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {}
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    sourceSets {
        test {
            assets.srcDir file('src/test/assets')
        }
    }
}

kapt {
    correctErrorTypes = true
    generateStubs = true
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
// Android
def supportLibraryVersion = '27.1.1'
def constraintLayoutVersion = '1.1.0'
def archComponentsVersion = '1.1.1'
// Custom views, layouts
def zoomlayoutVersion = '1.1.0'
def markwonVersion = '1.0.4'
// Kotlin reflect
def kotlinReflectVersion = '1.2.41'
// RxJava
def rxjavaVersion = '2.1.7'
def rxKotlinVersion = '2.2.0'
def rxandroidVersion = '2.0.1'
def rxBindingVersion = '2.0.0'
// Injection
def daggerVersion = '2.14.1'
// Database
def roomVersion = '1.1.0'
def assetSQLiteOpenHelperVersion = '1.0'

// Others?
def jsr305Version = '3.0.1'

// Unit tests
def junitVersion = '4.12'
def robolectricVersion = '3.4.2'
// Instrumentation tests
def runnerVersion = '0.5'
def rulesVersion = '0.5'
def mockitoAndroidVersion = '2.6.1'
def mockitoVersion = '1.10.19'
def powerMockito = '1.6.2'
def hamcrestVersion = '1.3'
def mockitoKotlinVersion = '1.5.0'
def espressoVersion = '3.0.2'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinReflectVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // App's dependencies, including test
    implementation "android.arch.lifecycle:extensions:$archComponentsVersion"
    implementation "android.arch.lifecycle:runtime:$archComponentsVersion"
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation "com.android.support.test.espresso:espresso-idling-resource:$espressoVersion"
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"
    implementation "com.github.daolq3012:AssetSQLiteOpenHelper:$assetSQLiteOpenHelperVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rxBindingVersion"
    implementation "com.otaliastudios:zoomlayout:$zoomlayoutVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"
    implementation 'com.android.support:support-annotations:27.1.1'
    implementation 'com.tspoon.traceur:traceur:1.0.1'
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'ru.noties:markwon:1.0.4'
    kapt "android.arch.lifecycle:common-java8:$archComponentsVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'

    // Dependencies for mock
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.3'
    mockImplementation 'io.github.benas:random-beans:2.0.0'

    // Dependencies for local unit tests
    testImplementation "android.arch.persistence.room:testing:$roomVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.mockito:mockito-all:$mockitoVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:rules:$runnerVersion"
    androidTestImplementation "com.android.support.test:runner:$runnerVersion"

    // Dependencies for Android unit tests
    androidTestImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'

    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"

    // Espresso UI Testing
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion"

    // Resolve conflicts between main and test APK:
    androidTestImplementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    androidTestImplementation "com.android.support:design:$supportLibraryVersion"
    androidTestImplementation "com.android.support:recyclerview-v7:$supportLibraryVersion"
    androidTestImplementation "com.android.support:support-annotations:$supportLibraryVersion"
    androidTestImplementation "com.android.support:support-v4:$supportLibraryVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    //  resolutionStrategy.force "com.android.support:support-annotations:$ext.lib.supportLibraryVersion"
    resolutionStrategy {
        force 'org.objenesis:objenesis:2.1'
        force "com.google.code.findbugs:jsr305:$jsr305Version"
    }
}

private Integer generateVersionCode() {
    return rootProject.ext.minSdkVersion * 10000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
    if (ext.versionClassifier == null) {
        if (ext.isSnapshot) {
            ext.versionClassifier = "SNAPSHOT"
        }
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifier
    }
    return versionName;
}